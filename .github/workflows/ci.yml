name: CI

on:
  push:
    paths:
      - 'frontend/**'
      - 'lambdas/**'
      - 'infra/**'
      - '.github/actions/**'
      - '.github/workflows/ci.yml'
  pull_request:
    paths:
      - 'frontend/**'
      - 'lambdas/**'
      - 'infra/**'
      - '.github/actions/**'
      - '.github/workflows/ci.yml'

jobs:
  build-lambdas:
    name: Build all Lambdas
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build all Lambdas
        shell: bash
        run: |
          for dir in $(find lambdas -type f -name package.json -exec dirname {} \;); do
            name=$(basename "$dir")
            gh workflow run .github/actions/build-lambda --inputs "lambda_name=$name,path=$dir,node_version=22"
          done

  terraform:
    name: Terraform plan
    runs-on: ubuntu-latest
    needs: [build-lambdas]
    if: ${{ always() && (needs.build-lambdas.result == 'success' || needs.build-lambdas.result == 'skipped' || !needs.build-lambdas.result) }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download built Lambda artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-artifact"
          path: infra/lambdas/files
          merge-multiple: true

      - name: Terraform CI
        uses: ./.github/actions/terraform-ci
        with:
          working_directory: infra
          terraform_version: '1.9.5'
          configure_aws: 'true'
          aws_role_to_assume: ${{ secrets.AWS_TERRAFORM_ROLE_ARN }}
          aws_region: 'eu-west-1'

  frontend_deploy:
    name: Build and deploy frontend
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (contains(github.event.head_commit.message, 'frontend') || contains(toJson(github.event.commits), 'frontend/')) }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build and Deploy Frontend
        uses: ./.github/actions/frontend-deploy
        with:
          bucket: ${{ vars.FRONTEND_BUCKET }}
          role_to_assume: ${{ secrets.AWS_TERRAFORM_ROLE_ARN }}
